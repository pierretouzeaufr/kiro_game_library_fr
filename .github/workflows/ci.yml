name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  build:
    name: Build Distributions
    runs-on: ${{ matrix.os }}
    needs: [test, lint]
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: board-game-library-linux-amd64
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
            artifact_name: board-game-library-windows-amd64.exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: board-game-library-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: board-game-library-darwin-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -ldflags="-s -w" -o ${{ matrix.artifact_name }} ./cmd/server
        else
          go build -ldflags="-s -w" -o ${{ matrix.artifact_name }} ./cmd/server
        fi
        
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/board-game-library
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Create distribution packages
      run: |
        mkdir -p releases
        
        # Create Windows distribution
        mkdir -p windows-dist
        cp artifacts/board-game-library-windows-amd64.exe/board-game-library-windows-amd64.exe windows-dist/board-game-library.exe
        cp -r web windows-dist/
        cp -r docs windows-dist/
        cp build/windows/config.windows.env windows-dist/config.env
        cp build/windows/run.bat windows-dist/
        cp build/windows/run-portable.bat windows-dist/
        echo "Board Game Library - Windows Distribution" > windows-dist/README.txt
        echo "Run run.bat to start the application" >> windows-dist/README.txt
        zip -r releases/board-game-library-windows-amd64.zip windows-dist/
        
        # Create macOS Intel distribution
        mkdir -p macos-intel-dist
        cp artifacts/board-game-library-darwin-amd64/board-game-library-darwin-amd64 macos-intel-dist/board-game-library
        chmod +x macos-intel-dist/board-game-library
        cp -r web macos-intel-dist/
        cp -r docs macos-intel-dist/
        cp build/macos/config.macos.env macos-intel-dist/config.env
        cp build/macos/run.sh macos-intel-dist/
        cp build/macos/run-portable.sh macos-intel-dist/
        chmod +x macos-intel-dist/*.sh
        echo "Board Game Library - macOS Intel Distribution" > macos-intel-dist/README.txt
        echo "Run ./run.sh to start the application" >> macos-intel-dist/README.txt
        tar -czf releases/board-game-library-macos-intel.tar.gz -C macos-intel-dist .
        
        # Create macOS Apple Silicon distribution
        mkdir -p macos-arm64-dist
        cp artifacts/board-game-library-darwin-arm64/board-game-library-darwin-arm64 macos-arm64-dist/board-game-library
        chmod +x macos-arm64-dist/board-game-library
        cp -r web macos-arm64-dist/
        cp -r docs macos-arm64-dist/
        cp build/macos/config.macos.env macos-arm64-dist/config.env
        cp build/macos/run.sh macos-arm64-dist/
        cp build/macos/run-portable.sh macos-arm64-dist/
        chmod +x macos-arm64-dist/*.sh
        echo "Board Game Library - macOS Apple Silicon Distribution" > macos-arm64-dist/README.txt
        echo "Run ./run.sh to start the application" >> macos-arm64-dist/README.txt
        tar -czf releases/board-game-library-macos-arm64.tar.gz -C macos-arm64-dist .
        
        # Create Linux distribution
        mkdir -p linux-dist
        cp artifacts/board-game-library-linux-amd64/board-game-library-linux-amd64 linux-dist/board-game-library
        chmod +x linux-dist/board-game-library
        cp -r web linux-dist/
        cp -r docs linux-dist/
        cp config.example.env linux-dist/config.env
        echo "Board Game Library - Linux Distribution" > linux-dist/README.txt
        echo "Run ./board-game-library to start the application" >> linux-dist/README.txt
        tar -czf releases/board-game-library-linux-amd64.tar.gz -C linux-dist .
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          releases/board-game-library-windows-amd64.zip
          releases/board-game-library-macos-intel.tar.gz
          releases/board-game-library-macos-arm64.tar.gz
          releases/board-game-library-linux-amd64.tar.gz
        generate_release_notes: true